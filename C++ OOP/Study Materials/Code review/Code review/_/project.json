{"description":"Exersice Project for `Magshimim Code Review` exercise.","visibility_level":0,"archived":false,"merge_requests_template":null,"merge_requests_rebase_enabled":false,"approvals_before_merge":0,"reset_approvals_on_push":false,"merge_requests_ff_only_enabled":false,"issues_template":null,"shared_runners_enabled":true,"build_coverage_regex":null,"build_allow_git_fetch":true,"build_timeout":3600,"public_builds":true,"pending_delete":false,"last_repository_check_failed":null,"container_registry_enabled":false,"only_allow_merge_if_pipeline_succeeds":false,"has_external_issue_tracker":false,"request_access_enabled":true,"has_external_wiki":false,"only_allow_merge_if_all_discussions_are_resolved":false,"repository_size_limit":null,"service_desk_enabled":false,"printing_merge_request_link_enabled":true,"auto_cancel_pending_pipelines":"enabled","ci_config_path":null,"disable_overriding_approvers_per_merge_request":null,"delete_error":null,"resolve_outdated_diff_discussions":false,"jobs_cache_index":null,"external_authorization_classification_label":"","external_webhook_token":null,"pages_https_only":false,"merge_requests_author_approval":null,"merge_requests_disable_committers_approval":null,"require_password_to_approve":null,"remove_source_branch_after_merge":false,"suggestion_commit_message":"","autoclose_referenced_issues":true,"labels":[],"milestones":[],"issues":[],"snippets":[],"releases":[],"project_members":[{"id":23743632,"access_level":40,"source_type":"Project","user_id":2164410,"notification_level":3,"created_at":"2020-04-12T00:45:39.724Z","updated_at":"2020-04-12T00:45:39.724Z","created_by_id":2164410,"invite_email":null,"invite_token":null,"invite_accepted_at":null,"requested_at":null,"expires_at":null,"ldap":false,"override":false,"user":{"id":2164410,"email":"arielsafari@gmail.com","username":"Yusim"}}],"merge_requests":[{"id":55495448,"target_branch":"develop","source_branch":"Exercise/03-BoatNavigationSystem","source_project_id":18077653,"author_id":2164410,"assignee_id":null,"title":"03 Boat Navigation System","created_at":"2020-04-12T16:29:16.288Z","updated_at":"2020-04-12T16:32:28.870Z","merge_status":"can_be_merged","target_project_id":18077653,"iid":4,"description":"Code Review Exercise 03 - Boat Navigation System","updated_by_id":2164410,"merge_error":null,"merge_params":{"force_remove_source_branch":"0"},"merge_when_pipeline_succeeds":false,"merge_user_id":null,"merge_commit_sha":null,"approvals_before_merge":null,"rebase_commit_sha":null,"in_progress_merge_commit_sha":null,"lock_version":0,"time_estimate":0,"squash":false,"last_edited_at":null,"last_edited_by_id":null,"discussion_locked":null,"allow_maintainer_to_push":null,"squash_commit_sha":null,"diff_head_sha":"6b7cde0523c075b19af4fc55de9e15ba4bb885b2","source_branch_sha":"6b7cde0523c075b19af4fc55de9e15ba4bb885b2","target_branch_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","state":"opened","metrics":{"id":44353979,"latest_build_started_at":null,"latest_build_finished_at":null,"first_deployed_to_production_at":null,"merged_at":null,"created_at":"2020-04-12T16:29:16.819Z","updated_at":"2020-04-12T16:29:16.819Z","merged_by_id":null,"latest_closed_by_id":null,"latest_closed_at":null,"first_comment_at":null,"first_commit_at":null,"last_commit_at":null,"diff_size":null,"modified_paths_size":null,"commits_count":null,"first_approved_at":null,"first_reassigned_at":null,"added_lines":null,"removed_lines":null},"award_emoji":[],"notes":[{"id":322336832,"note":"added 1 commit\n\n\u003cul\u003e\u003cli\u003e6b7cde05 - Update indentation from tabs to spaces\u003c/li\u003e\u003c/ul\u003e\n\n[Compare with previous version](/Yusim/code-review-exercise/-/merge_requests/4/diffs?diff_id=84999403\u0026start_sha=1306af7dda29b7fd0b285bd5874127ac642cffae)","noteable_type":"MergeRequest","author_id":2164410,"created_at":"2020-04-12T16:32:28.849Z","updated_at":"2020-04-12T16:32:28.850Z","project_id":18077653,"attachment":{"url":null},"line_code":null,"commit_id":null,"st_diff":null,"system":true,"updated_by_id":null,"position":null,"original_position":null,"resolved_at":null,"resolved_by_id":null,"discussion_id":"7fa02f40f0fa8cbbbb75e45c6595caabcf847470","change_position":null,"resolved_by_push":null,"confidential":null,"type":null,"author":{"name":"Ariel"},"award_emoji":[],"system_note_metadata":{"id":191378187,"commit_count":1,"action":"commit","created_at":"2020-04-12T16:32:28.886Z","updated_at":"2020-04-12T16:32:28.886Z"},"events":[],"suggestions":[]}],"merge_request_diff":{"id":84999403,"state":"collected","created_at":"2020-04-12T16:32:28.398Z","updated_at":"2020-04-12T16:32:28.440Z","base_commit_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","real_size":"10","head_commit_sha":"6b7cde0523c075b19af4fc55de9e15ba4bb885b2","start_commit_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","commits_count":2,"merge_request_diff_commits":[{"authored_date":"2020-04-12T16:32:16.000Z","committed_date":"2020-04-12T16:32:16.000Z","relative_order":0,"sha":"6b7cde0523c075b19af4fc55de9e15ba4bb885b2","author_name":"Madrich","author_email":"madrich@cyber.org.il","committer_name":"Madrich","committer_email":"madrich@cyber.org.il","message":"Update indentation from tabs to spaces\n"},{"authored_date":"2020-04-12T16:21:35.000Z","committed_date":"2020-04-12T16:21:35.000Z","relative_order":1,"sha":"1306af7dda29b7fd0b285bd5874127ac642cffae","author_name":"Madrich","author_email":"madrich@cyber.org.il","committer_name":"Madrich","committer_email":"madrich@cyber.org.il","message":"Added Boat Navigation System files\n"}],"merge_request_diff_files":[{"relative_order":0,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/BoatNavigationSystem.sln","old_path":"BoatNavigationSystem/BoatNavigationSystem.sln","binary":false,"utf8_diff":"@@ -0,0 +1,31 @@\n+ï»¿\n+Microsoft Visual Studio Solution File, Format Version 12.00\n+# Visual Studio 15\n+VisualStudioVersion = 15.0.28307.1022\n+MinimumVisualStudioVersion = 10.0.40219.1\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"BoatNavigationSystem\", \"BoatNavigationSystem.vcxproj\", \"{52E8786D-3154-49BC-953F-6BC92B7B8C85}\"\n+EndProject\n+Global\n+    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+        Debug|x64 = Debug|x64\n+        Debug|x86 = Debug|x86\n+        Release|x64 = Release|x64\n+        Release|x86 = Release|x86\n+    EndGlobalSection\n+    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Debug|x64.ActiveCfg = Debug|x64\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Debug|x64.Build.0 = Debug|x64\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Debug|x86.ActiveCfg = Debug|Win32\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Debug|x86.Build.0 = Debug|Win32\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Release|x64.ActiveCfg = Release|x64\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Release|x64.Build.0 = Release|x64\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Release|x86.ActiveCfg = Release|Win32\n+        {52E8786D-3154-49BC-953F-6BC92B7B8C85}.Release|x86.Build.0 = Release|Win32\n+    EndGlobalSection\n+    GlobalSection(SolutionProperties) = preSolution\n+        HideSolutionNode = FALSE\n+    EndGlobalSection\n+    GlobalSection(ExtensibilityGlobals) = postSolution\n+        SolutionGuid = {29856071-A71C-46DF-B786-CB185AA093E7}\n+    EndGlobalSection\n+EndGlobal\n"},{"relative_order":1,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/BoatNavigationSystem.vcxproj","old_path":"BoatNavigationSystem/BoatNavigationSystem.vcxproj","binary":false,"utf8_diff":"@@ -0,0 +1,139 @@\n+\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n+\u003cProject DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\n+  \u003cItemGroup Label=\"ProjectConfigurations\"\u003e\n+    \u003cProjectConfiguration Include=\"Debug|Win32\"\u003e\n+      \u003cConfiguration\u003eDebug\u003c/Configuration\u003e\n+      \u003cPlatform\u003eWin32\u003c/Platform\u003e\n+    \u003c/ProjectConfiguration\u003e\n+    \u003cProjectConfiguration Include=\"Release|Win32\"\u003e\n+      \u003cConfiguration\u003eRelease\u003c/Configuration\u003e\n+      \u003cPlatform\u003eWin32\u003c/Platform\u003e\n+    \u003c/ProjectConfiguration\u003e\n+    \u003cProjectConfiguration Include=\"Debug|x64\"\u003e\n+      \u003cConfiguration\u003eDebug\u003c/Configuration\u003e\n+      \u003cPlatform\u003ex64\u003c/Platform\u003e\n+    \u003c/ProjectConfiguration\u003e\n+    \u003cProjectConfiguration Include=\"Release|x64\"\u003e\n+      \u003cConfiguration\u003eRelease\u003c/Configuration\u003e\n+      \u003cPlatform\u003ex64\u003c/Platform\u003e\n+    \u003c/ProjectConfiguration\u003e\n+  \u003c/ItemGroup\u003e\n+  \u003cPropertyGroup Label=\"Globals\"\u003e\n+    \u003cVCProjectVersion\u003e15.0\u003c/VCProjectVersion\u003e\n+    \u003cProjectGuid\u003e{52E8786D-3154-49BC-953F-6BC92B7B8C85}\u003c/ProjectGuid\u003e\n+    \u003cRootNamespace\u003eBoatNavigationSystem\u003c/RootNamespace\u003e\n+    \u003cWindowsTargetPlatformVersion\u003e10.0.17134.0\u003c/WindowsTargetPlatformVersion\u003e\n+  \u003c/PropertyGroup\u003e\n+  \u003cImport Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" /\u003e\n+  \u003cPropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\"\u003e\n+    \u003cConfigurationType\u003eApplication\u003c/ConfigurationType\u003e\n+    \u003cUseDebugLibraries\u003etrue\u003c/UseDebugLibraries\u003e\n+    \u003cPlatformToolset\u003ev141\u003c/PlatformToolset\u003e\n+    \u003cCharacterSet\u003eMultiByte\u003c/CharacterSet\u003e\n+  \u003c/PropertyGroup\u003e\n+  \u003cPropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\"\u003e\n+    \u003cConfigurationType\u003eApplication\u003c/ConfigurationType\u003e\n+    \u003cUseDebugLibraries\u003efalse\u003c/UseDebugLibraries\u003e\n+    \u003cPlatformToolset\u003ev141\u003c/PlatformToolset\u003e\n+    \u003cWholeProgramOptimization\u003etrue\u003c/WholeProgramOptimization\u003e\n+    \u003cCharacterSet\u003eMultiByte\u003c/CharacterSet\u003e\n+  \u003c/PropertyGroup\u003e\n+  \u003cPropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\"\u003e\n+    \u003cConfigurationType\u003eApplication\u003c/ConfigurationType\u003e\n+    \u003cUseDebugLibraries\u003etrue\u003c/UseDebugLibraries\u003e\n+    \u003cPlatformToolset\u003ev141\u003c/PlatformToolset\u003e\n+    \u003cCharacterSet\u003eMultiByte\u003c/CharacterSet\u003e\n+  \u003c/PropertyGroup\u003e\n+  \u003cPropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\"\u003e\n+    \u003cConfigurationType\u003eApplication\u003c/ConfigurationType\u003e\n+    \u003cUseDebugLibraries\u003efalse\u003c/UseDebugLibraries\u003e\n+    \u003cPlatformToolset\u003ev141\u003c/PlatformToolset\u003e\n+    \u003cWholeProgramOptimization\u003etrue\u003c/WholeProgramOptimization\u003e\n+    \u003cCharacterSet\u003eMultiByte\u003c/CharacterSet\u003e\n+  \u003c/PropertyGroup\u003e\n+  \u003cImport Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" /\u003e\n+  \u003cImportGroup Label=\"ExtensionSettings\"\u003e\n+  \u003c/ImportGroup\u003e\n+  \u003cImportGroup Label=\"Shared\"\u003e\n+  \u003c/ImportGroup\u003e\n+  \u003cImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\"\u003e\n+    \u003cImport Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" /\u003e\n+  \u003c/ImportGroup\u003e\n+  \u003cImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\"\u003e\n+    \u003cImport Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" /\u003e\n+  \u003c/ImportGroup\u003e\n+  \u003cImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\"\u003e\n+    \u003cImport Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" /\u003e\n+  \u003c/ImportGroup\u003e\n+  \u003cImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\"\u003e\n+    \u003cImport Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" /\u003e\n+  \u003c/ImportGroup\u003e\n+  \u003cPropertyGroup Label=\"UserMacros\" /\u003e\n+  \u003cPropertyGroup /\u003e\n+  \u003cItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\"\u003e\n+    \u003cClCompile\u003e\n+      \u003cWarningLevel\u003eLevel3\u003c/WarningLevel\u003e\n+      \u003cOptimization\u003eDisabled\u003c/Optimization\u003e\n+      \u003cSDLCheck\u003etrue\u003c/SDLCheck\u003e\n+      \u003cConformanceMode\u003etrue\u003c/ConformanceMode\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cLink\u003e\n+      \u003cSubSystem\u003eConsole\u003c/SubSystem\u003e\n+    \u003c/Link\u003e\n+  \u003c/ItemDefinitionGroup\u003e\n+  \u003cItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\"\u003e\n+    \u003cClCompile\u003e\n+      \u003cWarningLevel\u003eLevel3\u003c/WarningLevel\u003e\n+      \u003cOptimization\u003eDisabled\u003c/Optimization\u003e\n+      \u003cSDLCheck\u003etrue\u003c/SDLCheck\u003e\n+      \u003cConformanceMode\u003etrue\u003c/ConformanceMode\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cLink\u003e\n+      \u003cSubSystem\u003eConsole\u003c/SubSystem\u003e\n+    \u003c/Link\u003e\n+  \u003c/ItemDefinitionGroup\u003e\n+  \u003cItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\"\u003e\n+    \u003cClCompile\u003e\n+      \u003cWarningLevel\u003eLevel3\u003c/WarningLevel\u003e\n+      \u003cOptimization\u003eMaxSpeed\u003c/Optimization\u003e\n+      \u003cFunctionLevelLinking\u003etrue\u003c/FunctionLevelLinking\u003e\n+      \u003cIntrinsicFunctions\u003etrue\u003c/IntrinsicFunctions\u003e\n+      \u003cSDLCheck\u003etrue\u003c/SDLCheck\u003e\n+      \u003cConformanceMode\u003etrue\u003c/ConformanceMode\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cLink\u003e\n+      \u003cSubSystem\u003eConsole\u003c/SubSystem\u003e\n+      \u003cEnableCOMDATFolding\u003etrue\u003c/EnableCOMDATFolding\u003e\n+      \u003cOptimizeReferences\u003etrue\u003c/OptimizeReferences\u003e\n+    \u003c/Link\u003e\n+  \u003c/ItemDefinitionGroup\u003e\n+  \u003cItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\"\u003e\n+    \u003cClCompile\u003e\n+      \u003cWarningLevel\u003eLevel3\u003c/WarningLevel\u003e\n+      \u003cOptimization\u003eMaxSpeed\u003c/Optimization\u003e\n+      \u003cFunctionLevelLinking\u003etrue\u003c/FunctionLevelLinking\u003e\n+      \u003cIntrinsicFunctions\u003etrue\u003c/IntrinsicFunctions\u003e\n+      \u003cSDLCheck\u003etrue\u003c/SDLCheck\u003e\n+      \u003cConformanceMode\u003etrue\u003c/ConformanceMode\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cLink\u003e\n+      \u003cSubSystem\u003eConsole\u003c/SubSystem\u003e\n+      \u003cEnableCOMDATFolding\u003etrue\u003c/EnableCOMDATFolding\u003e\n+      \u003cOptimizeReferences\u003etrue\u003c/OptimizeReferences\u003e\n+    \u003c/Link\u003e\n+  \u003c/ItemDefinitionGroup\u003e\n+  \u003cItemGroup\u003e\n+    \u003cClCompile Include=\"BoatPath.cpp\" /\u003e\n+    \u003cClCompile Include=\"Main.cpp\" /\u003e\n+    \u003cClCompile Include=\"NavMap.cpp\" /\u003e\n+    \u003cClCompile Include=\"Point.cpp\" /\u003e\n+  \u003c/ItemGroup\u003e\n+  \u003cItemGroup\u003e\n+    \u003cClInclude Include=\"BoatPath.h\" /\u003e\n+    \u003cClInclude Include=\"NavMap.h\" /\u003e\n+    \u003cClInclude Include=\"Point.h\" /\u003e\n+  \u003c/ItemGroup\u003e\n+  \u003cImport Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" /\u003e\n+  \u003cImportGroup Label=\"ExtensionTargets\"\u003e\n+  \u003c/ImportGroup\u003e\n+\u003c/Project\u003e\n\\ No newline at end of file\n"},{"relative_order":2,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/BoatNavigationSystem.vcxproj.filters","old_path":"BoatNavigationSystem/BoatNavigationSystem.vcxproj.filters","binary":false,"utf8_diff":"@@ -0,0 +1,42 @@\n+ï»¿\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n+\u003cProject ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\n+  \u003cItemGroup\u003e\n+    \u003cFilter Include=\"Source Files\"\u003e\n+      \u003cUniqueIdentifier\u003e{4FC737F1-C7A5-4376-A066-2A32D752A2FF}\u003c/UniqueIdentifier\u003e\n+      \u003cExtensions\u003ecpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx\u003c/Extensions\u003e\n+    \u003c/Filter\u003e\n+    \u003cFilter Include=\"Header Files\"\u003e\n+      \u003cUniqueIdentifier\u003e{93995380-89BD-4b04-88EB-625FBE52EBFB}\u003c/UniqueIdentifier\u003e\n+      \u003cExtensions\u003eh;hh;hpp;hxx;hm;inl;inc;ipp;xsd\u003c/Extensions\u003e\n+    \u003c/Filter\u003e\n+    \u003cFilter Include=\"Resource Files\"\u003e\n+      \u003cUniqueIdentifier\u003e{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}\u003c/UniqueIdentifier\u003e\n+      \u003cExtensions\u003erc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms\u003c/Extensions\u003e\n+    \u003c/Filter\u003e\n+  \u003c/ItemGroup\u003e\n+  \u003cItemGroup\u003e\n+    \u003cClCompile Include=\"Point.cpp\"\u003e\n+      \u003cFilter\u003eSource Files\u003c/Filter\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cClCompile Include=\"Main.cpp\"\u003e\n+      \u003cFilter\u003eSource Files\u003c/Filter\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cClCompile Include=\"NavMap.cpp\"\u003e\n+      \u003cFilter\u003eSource Files\u003c/Filter\u003e\n+    \u003c/ClCompile\u003e\n+    \u003cClCompile Include=\"BoatPath.cpp\"\u003e\n+      \u003cFilter\u003eSource Files\u003c/Filter\u003e\n+    \u003c/ClCompile\u003e\n+  \u003c/ItemGroup\u003e\n+  \u003cItemGroup\u003e\n+    \u003cClInclude Include=\"Point.h\"\u003e\n+      \u003cFilter\u003eHeader Files\u003c/Filter\u003e\n+    \u003c/ClInclude\u003e\n+    \u003cClInclude Include=\"NavMap.h\"\u003e\n+      \u003cFilter\u003eHeader Files\u003c/Filter\u003e\n+    \u003c/ClInclude\u003e\n+    \u003cClInclude Include=\"BoatPath.h\"\u003e\n+      \u003cFilter\u003eHeader Files\u003c/Filter\u003e\n+    \u003c/ClInclude\u003e\n+  \u003c/ItemGroup\u003e\n+\u003c/Project\u003e\n\\ No newline at end of file\n"},{"relative_order":3,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/BoatPath.cpp","old_path":"BoatNavigationSystem/BoatPath.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,156 @@\n+#include \"BoatPath.h\"\n+\n+#include\u003ciostream\u003e\n+\n+namespace boatPath\n+{\n+\n+vector\u003cchar\u003e findShortestPath(char boatLoc, char portLoc, char windDir, char waterDir, char boatDir)\n+{\n+    vector\u003cchar\u003e chosenPath;\n+    vector\u003cvector\u003cchar\u003e\u003e allPossiblePaths = findAllPaths(boatLoc, portLoc);\n+    int chosenPathDis = 0;\n+    int currDis = 0;\n+\n+    for (vector\u003cchar\u003e path : allPossiblePaths)\n+    {\n+        for (int i = 0; i \u003c (path.size() - 1); i++)\n+        {\n+            currDis += dstncBtwnClosePts(path[i], path[i + 1], windDir, waterDir);\n+        }\n+        cout \u003c\u003c currDis \u003c\u003c endl;\n+        if (currDis \u003e chosenPathDis)\n+        {\n+            chosenPath = path;\n+            chosenPathDis = currDis;\n+        }\n+        currDis = 0;\n+    }\n+\n+    return chosenPath;\n+}\n+\n+int dstncBtwnClosePts(char pSrc, char pDest, char windDir, char waterDir)\n+{\n+    int distance = 2;\n+    char dir = dirBtwnClosePts(pSrc, pDest);\n+\n+    if (windDir == dir)\n+        distance++;\n+    else if (windDir == oppositeDir(dir))\n+        distance--;\n+\n+    if (waterDir == dir)\n+        distance++;\n+    else if (waterDir == oppositeDir(dir))\n+        distance--;\n+\n+    return distance;\n+}\n+\n+char dirBtwnClosePts(char pSrc, char pDest)\n+{\n+    // find direction from pSrc to pDest\n+    switch (pDest - pSrc)\n+    {\n+    case SIZE:\n+        return UP;\n+    case -SIZE:\n+        return DOWN;\n+    case 1:\n+        return LEFT;\n+    case -1:\n+        return RIGHT;\n+    }\n+}\n+\n+vector\u003cvector\u003cchar\u003e\u003e findAllPaths(char boatLoc, char portLoc)\n+{\n+    vector\u003cvector\u003cchar\u003e\u003e paths;\n+    vector\u003cchar\u003e tempPath;\n+    vector\u003cchar\u003e generalDir = findGeneralDir(boatLoc, portLoc);\n+    int dirSize = generalDir.size();\n+\n+    for (int i = 0; i \u003c dirSize; i++)\n+    {\n+        tempPath.clear();\n+        for (int j = 0; j \u003c dirSize; j++)\n+            tempPath.push_back(generalDir[(j + i) % dirSize]);\n+        paths.push_back(tempPath);\n+    }\n+\n+    return paths;\n+}\n+\n+\n+vector\u003cchar\u003e findGeneralDir(char pSrc, char pDest)\n+{\n+    vector\u003cchar\u003e dirs;\n+    int xCount = 0, yCount = 0;\n+\n+    int xSrc, ySrc, xDest, yDest;\n+    charToCord(pSrc, xSrc, ySrc);\n+    charToCord(pDest, xDest, yDest);\n+\n+    xCount = xSrc - xDest;\n+    yCount = ySrc - yDest;\n+\n+    for (int i = 0; i \u003c abs(yCount); i++)\n+    {\n+        if (yCount \u003c 0)\n+            dirs.push_back(RIGHT);\n+        else\n+            dirs.push_back(LEFT);\n+    }\n+\n+    for (int i = 0; i \u003c abs(xCount); i++)\n+    {\n+        if (xCount \u003c 0)\n+            dirs.push_back(DOWN);\n+        else\n+            dirs.push_back(UP);\n+    }\n+\n+    // returns R R U (for example)\n+    return dirs;\n+}\n+\n+char oppositeDir(char dir)\n+{\n+    if (dir == UP)\n+        return DOWN;\n+    if (dir == DOWN)\n+        return UP;\n+\n+    if (dir == LEFT)\n+        return RIGHT;\n+    if (dir == RIGHT)\n+        return LEFT;\n+\n+    return '\\0';\n+}\n+\n+/* \n+// OLD Code, Should be deleted\n+char oppositeDir(char dir)\n+{\n+    if (dir == \"U\")\n+        return \"D\";\n+    if (dir == \"D\")\n+        return \"U\";\n+\n+    if (dir == \"L\")\n+        return \"R\";\n+    if (dir == \"R\")\n+        return \"L\";\n+\n+    return '\\0';\n+}\n+*/\n+void charToCord(char ch, int \u0026 x, int \u0026 y)\n+{\n+    x = (ch - 'A') / SIZE;\n+    y = (ch - 'A') % SIZE;\n+}\n+\n+}\n\\ No newline at end of file\n"},{"relative_order":4,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/BoatPath.h","old_path":"BoatNavigationSystem/BoatPath.h","binary":false,"utf8_diff":"@@ -0,0 +1,24 @@\n+#include\u003cvector\u003e\n+\n+#define SIZE 4\n+#define UP\t\t'U'\n+#define DOWN\t'D'\n+#define LEFT\t'L'\n+#define RIGHT\t'R'\n+\n+using namespace std;\n+\n+namespace boatPath \n+{\n+\n+char oppositeDir(char dir);\n+void charToCord(char ch, int \u0026 x, int \u0026 y);\n+\n+char dirBtwnClosePts(char pSrc, char pDest);\n+int dstncBtwnClosePts(char pSrc, char pDest, char windDir, char waterDir);\n+\n+vector\u003cvector\u003cchar\u003e\u003e findAllPaths(char boatLoc, char portLoc);\n+vector\u003cchar\u003e findGeneralDir(char pSrc, char pDest);\n+vector\u003cchar\u003e findShortestPath(char boatLoc, char portLoc, char windDir, char waterDir, char boatDir);\n+\n+}\n\\ No newline at end of file\n"},{"relative_order":5,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/Main.cpp","old_path":"BoatNavigationSystem/Main.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,124 @@\n+#include\u003ciostream\u003e\n+#include\u003cvector\u003e\n+#include\u003cmap\u003e\n+#include\u003cmath.h\u003e\n+\n+#include \"BoatPath.h\"\n+\n+using namespace std;\n+\n+void fillMap(char map[SIZE][SIZE]);\n+void printMap(char map[SIZE][SIZE]);\n+void getDir(char \u0026 wind, char \u0026 water, char \u0026 boat);\n+void upperCase(char \u0026 ch);\n+char charToSymbol(char dir);\n+char cordToChar(int x, int y);\n+\n+void main()\n+{\n+    char map[SIZE][SIZE];\n+    char windDir = 'D';\n+    char waterDir = 'L';\n+    char boatDir = 'R';\n+\n+    vector\u003cvector\u003cchar\u003e\u003e allPaths = boatPath::findAllPaths('I', 'B');\n+    for (vector\u003cchar\u003e vec : allPaths)\n+    {\n+        for (char ch : vec)\n+            cout \u003c\u003c ch \u003c\u003c \" \";\n+        cout \u003c\u003c endl;\n+    }\n+\n+    ///// Not sure what this code is for\n+    cout \u003c\u003c endl;\n+    vector\u003cchar\u003e chosenPath = boatPath::findShortestPath('I', 'B', windDir, waterDir, boatDir);\n+    for (char ch : chosenPath)\n+        cout \u003c\u003c ch \u003c\u003c \" \";\n+    cout \u003c\u003c endl;\n+    /////////\n+\n+    system(\"pause\");\n+\n+    getDir(windDir, waterDir, boatDir);\n+    system(\"cls\");\n+\n+    fillMap(map);\n+    printMap(map);\n+\n+    cout \u003c\u003c \"Wind: \" \u003c\u003c charToSymbol(windDir) \u003c\u003c endl;\n+    cout \u003c\u003c \"Water: \" \u003c\u003c charToSymbol(waterDir) \u003c\u003c endl;\n+    cout \u003c\u003c \"Boat: \" \u003c\u003c charToSymbol(boatDir) \u003c\u003c endl;\n+\n+    cout \u003c\u003c boatPath::dstncBtwnClosePts('F', 'G', windDir, waterDir) \u003c\u003c endl;\n+\n+    system(\"pause\");\n+}\n+\n+void fillMap(char map[SIZE][SIZE])\n+{\n+    int x = 0;\n+    for (int i = 0; i \u003c SIZE; i++)\n+        for (int j = 0; j \u003c SIZE; j++, x++)\n+            map[i][j] = 'A' + x;\n+}\n+\n+void printMap(char map[SIZE][SIZE])\n+{\n+    for (int i = 0; i \u003c SIZE; i++)\n+    {\n+        cout \u003c\u003c (i == 0 ? \"\" : \"|    |    |    |\") \u003c\u003c endl;\n+\n+        for (int j = 0; j \u003c SIZE; j++)\n+        {\n+            cout \u003c\u003c (j == 0 ? \"\" : \" -- \");\n+            cout \u003c\u003c map[i][j];\n+        }\n+        cout \u003c\u003c endl;\n+    }\n+    cout \u003c\u003c endl;\n+}\n+\n+void getDir(char \u0026 wind, char \u0026 water, char \u0026 boat)\n+{\n+    cout \u003c\u003c \"Enter wind direction: \";\n+    cin \u003e\u003e wind;\n+\n+    cout \u003c\u003c endl \u003c\u003c \"Enter water direction: \";\n+    cin \u003e\u003e water;\n+\n+    cout \u003c\u003c endl \u003c\u003c \"Enter boat direction: \";\n+    cin \u003e\u003e boat;\n+\n+    upperCase(wind);\n+    upperCase(water);\n+    upperCase(boat);\n+\n+    cout \u003c\u003c endl \u003c\u003c endl;\n+}\n+\n+void upperCase(char \u0026 ch)\n+{\n+    if (ch \u003c 'A' || ch \u003e 'Z')\n+        ch = 'A' + (ch - 'a');\n+}\n+\n+char charToSymbol(char dir)\n+{\n+    switch (dir)\n+    {\n+    case UP:\n+        return '^';\n+    case DOWN:\n+        return 'v';\n+    case LEFT:\n+        return '\u003c';\n+    case RIGHT:\n+        return '\u003e';\n+    }\n+    return '\\0';\n+}\n+\n+char cordToChar(int x, int y)\n+{\n+    return 'A' + (y + (x * SIZE));\n+}\n"},{"relative_order":6,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/NavMap.cpp","old_path":"BoatNavigationSystem/NavMap.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,36 @@\n+#include \"NavMap.h\"\n+\n+\n+NavMap::NavMap()\n+{\n+    int x = 0;\n+    for (int i = 0; i \u003c SIZE; i++)\n+        for (int j = 0; j \u003c SIZE; j++, x++)\n+            _theMap.push_back(Point(i, j, 'A' + x));\n+}\n+\n+NavMap::~NavMap()\n+{\n+\n+}\n+\n+Point NavMap::getPoint(int x, int y)\n+{\n+    return Point(x, y, 'A' + y);\n+}\n+\n+void NavMap::printMap()\n+{\n+    for (int i = 0; i \u003c SIZE; i++)\n+    {\n+        cout \u003c\u003c (i == 0 ? \"\" : \"|    |    |    |\") \u003c\u003c endl;\n+\n+        for (int j = 0; j \u003c SIZE; j++)\n+        {\n+            cout \u003c\u003c (j == 0 ? \"\" : \" -- \");\n+            cout \u003c\u003c getPoint(i, j).toString();\n+        }\n+        cout \u003c\u003c endl;\n+    }\n+    cout \u003c\u003c endl;\n+}\n"},{"relative_order":7,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/NavMap.h","old_path":"BoatNavigationSystem/NavMap.h","binary":false,"utf8_diff":"@@ -0,0 +1,28 @@\n+#pragma once\n+\n+#include\u003ciostream\u003e\n+#include\u003cvector\u003e\n+#include \"Point.h\"\n+\n+#define SIZE 4\n+#define UP\t\t'U'\n+#define DOWN\t'D'\n+#define LEFT\t'L'\n+#define RIGHT\t'R'\n+\n+using namespace std;\n+\n+class NavMap\n+{\n+\n+public:\n+    NavMap();\n+    ~NavMap();\n+    Point getPoint(int x, int y);\n+    void printMap();\n+\n+private:\n+    vector\u003cPoint\u003e _theMap;\n+\n+};\n+\n"},{"relative_order":8,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/Point.cpp","old_path":"BoatNavigationSystem/Point.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,24 @@\n+#include \"Point.h\"\n+#include \u003csstream\u003e\n+#include \u003ciostream\u003e\n+\n+\n+Point::Point(int x, int y, char symbol)\n+{\n+    X = x;\n+    Y = y;\n+    Symbol = symbol;\n+}\n+\n+void Point::print()\n+{\n+    std::cout \u003c\u003c X \u003c\u003c \", \" \u003c\u003c Y \u003c\u003c \" \" \u003c\u003c Symbol;\n+}\n+\n+string Point::toString()\n+{\n+    stringstream x;\n+    x \u003c\u003c X \u003c\u003c \", \" \u003c\u003c Y \u003c\u003c \" \" \u003c\u003c Symbol;\n+\n+    return x.str();\n+}\n\\ No newline at end of file\n"},{"relative_order":9,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"BoatNavigationSystem/Point.h","old_path":"BoatNavigationSystem/Point.h","binary":false,"utf8_diff":"@@ -0,0 +1,19 @@\n+#pragma once\n+\n+#include\u003cstring\u003e\n+\n+using namespace std;\n+\n+class Point\n+{\n+public:\n+\n+    Point(int x, int y, char symbol);\n+    void print();\n+    string toString();\n+\n+    int X;\n+    int Y;\n+    char Symbol;\n+};\n+\n"}]},"events":[{"id":717206787,"project_id":18077653,"author_id":2164410,"created_at":"2020-04-12T16:29:16.866Z","updated_at":"2020-04-12T16:29:16.866Z","target_type":"MergeRequest","group_id":null,"action":1}],"timelogs":[],"label_links":[],"resource_label_events":[]},{"id":55495631,"target_branch":"develop","source_branch":"Exercise/02-GeneralMistakes","source_project_id":18077653,"author_id":2164410,"assignee_id":null,"title":"02 General Mistakes","created_at":"2020-04-12T16:37:00.575Z","updated_at":"2020-04-12T16:37:00.575Z","merge_status":"can_be_merged","target_project_id":18077653,"iid":6,"description":"Code Review Exercise 02 - General Clean Code Mistakes","updated_by_id":null,"merge_error":null,"merge_params":{"force_remove_source_branch":"0"},"merge_when_pipeline_succeeds":false,"merge_user_id":null,"merge_commit_sha":null,"approvals_before_merge":null,"rebase_commit_sha":null,"in_progress_merge_commit_sha":null,"lock_version":0,"time_estimate":0,"squash":false,"last_edited_at":null,"last_edited_by_id":null,"discussion_locked":null,"allow_maintainer_to_push":null,"squash_commit_sha":null,"diff_head_sha":"dd75edc94a0ecea07b186becb1edb18b8b47d96d","source_branch_sha":"dd75edc94a0ecea07b186becb1edb18b8b47d96d","target_branch_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","state":"opened","metrics":{"id":44354162,"latest_build_started_at":null,"latest_build_finished_at":null,"first_deployed_to_production_at":null,"merged_at":null,"created_at":"2020-04-12T16:37:00.995Z","updated_at":"2020-04-12T16:37:00.995Z","merged_by_id":null,"latest_closed_by_id":null,"latest_closed_at":null,"first_comment_at":null,"first_commit_at":null,"last_commit_at":null,"diff_size":null,"modified_paths_size":null,"commits_count":null,"first_approved_at":null,"first_reassigned_at":null,"added_lines":null,"removed_lines":null},"award_emoji":[],"notes":[],"merge_request_diff":{"id":84999597,"state":"collected","created_at":"2020-04-12T16:37:00.627Z","updated_at":"2020-04-12T16:37:00.672Z","base_commit_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","real_size":"4","head_commit_sha":"dd75edc94a0ecea07b186becb1edb18b8b47d96d","start_commit_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","commits_count":1,"merge_request_diff_commits":[{"authored_date":"2020-04-12T00:55:18.000Z","committed_date":"2020-04-12T00:55:18.000Z","relative_order":0,"sha":"dd75edc94a0ecea07b186becb1edb18b8b47d96d","author_name":"Madrich","author_email":"madrich@cyber.org.il","committer_name":"Madrich","committer_email":"madrich@cyber.org.il","message":"Add exercise 02 files\n"}],"merge_request_diff_files":[{"relative_order":0,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"02 General Mistakes/07 - Arrow Code.cpp","old_path":"02 General Mistakes/07 - Arrow Code.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,28 @@\n+// Arrow Code\n+\n+bool isNotValid(char ch)\n+{\n+    return !isalpha(ch) \u0026\u0026 !isdigit(ch);\n+}\n+\n+bool isValidUserName(const std::string\u0026 username)\n+{\n+    bool valid = false;\n+\n+    if (username.length() \u003e= MIN_NAME_LENGTH)\n+    {\n+        if (username.length() \u003c= MAX_NAME_LENGTH)\n+        {\n+            if (isalpha(username[0]))\n+            {\n+                bool foundNotValidChar = std::find_if(username.begin(), username.end(), isNotValid) != username.end();\n+                if (!foundNotValidChar)\n+                {\n+                    valid = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    return valid;\n+}\n"},{"relative_order":1,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"02 General Mistakes/08 - Naming.cpp","old_path":"02 General Mistakes/08 - Naming.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,45 @@\n+// Naming Mistakes\n+\n+#include \u003cstring\u003e\n+#include \u003cvector\u003e\n+#include \u003cexception\u003e\n+\n+float a(const std::vector\u003cint\u003e\u0026 l)\n+{\n+    if (l.empty())\n+        throw std::exception(\"invalid\");\n+\n+    float s = 0.0;\n+    for (std::vector\u003cint\u003e::const_iterator it = l.begin(), e = l.end(); it != e; ++it) {\n+        s += *it;\n+    }\n+\n+    return s / l.size();\n+}\n+\n+// Gets all even vector fields\n+std::vector\u003cint\u003e gevf(const std::vector\u003cint\u003e \u0026 vec)\n+{\n+    std::vector\u003cint\u003e result;\n+\n+    for (int i = 0; i \u003c vec.size(); i++) {\n+        if (i % 2 == 0) {\n+            result.push_back(vec[i]);\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+std::string Join_stringsInto_Vector(const std::vector\u003cstd::string\u003e\u0026 Strings_List)\n+{\n+    char Ch; // divider character\n+    std::string ret_val; // joined string\n+\n+    for (int i = 0; i \u003c stringsList.size(); i++) {\n+        ret_val += stringsList[i];\n+        ret_val += Ch;\n+    }\n+\n+    return ret_val;\n+}\n"},{"relative_order":2,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"02 General Mistakes/09 - Magic Numbers.cpp","old_path":"02 General Mistakes/09 - Magic Numbers.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,19 @@\n+// Magic Numbers\n+\n+#include \u003cstring\u003e\n+\n+std::string getOptionTitle(int code)\n+{\n+    if (option == 0) { return \"exit\"; }\n+    if (option == 1) { return \"show menu\"; }\n+    if (option == 2) { return \"select user\"; }\n+    \n+    return \"\";\n+}\n+\n+void process(const std::string\u0026 record) \n+{\n+    for (fieldCtr = 0; field \u003c 7; field++) {\n+        process(fields[fieldCtr]);\n+    }\n+}\n"},{"relative_order":3,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"02 General Mistakes/10 - Comments.cpp","old_path":"02 General Mistakes/10 - Comments.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,38 @@\n+// General Mistakes of Clean Code\n+\n+class Foo\n+{\n+    // Constructor\n+    Foo();\n+    int count = 100; // set count to 100\n+\n+    void incrementCounter()\n+    {\n+        this.count++; // use sneaky trick to add 1 to i!\n+    }\n+};\n+\n+// This function calculate fibonacci numbers using recursion\n+int fibonacci(int n)\n+{\n+    // this is the base case of this recursion\n+    if (n \u003c= 1)\n+        return n; // returns the value of n\n+    \n+    // enter the recursion\n+    return fibonacci(n - 1) + fibonacci(n - 2); \n+}\n+\n+int factorial(int n)\n+{\n+    // I'm sorry, I didn't have time to finish this...\n+    // TODO: Implement...\n+    return n;\n+}\n+\n+// sometimes I believe compiler ignores all my comments\n+int funnyComment()\n+{\n+    Exception up = new Exception(\"Something is really wrong.\");\n+    throw up;  //ha ha\n+}\n\\ No newline at end of file\n"}]},"events":[{"id":717210506,"project_id":18077653,"author_id":2164410,"created_at":"2020-04-12T16:37:01.094Z","updated_at":"2020-04-12T16:37:01.094Z","target_type":"MergeRequest","group_id":null,"action":1}],"timelogs":[],"label_links":[],"resource_label_events":[]},{"id":55495641,"target_branch":"develop","source_branch":"Exercise/01-Principles","source_project_id":18077653,"author_id":2164410,"assignee_id":null,"title":"01 Clean Code Principles","created_at":"2020-04-12T16:37:39.026Z","updated_at":"2020-04-12T16:37:39.026Z","merge_status":"can_be_merged","target_project_id":18077653,"iid":7,"description":"Code Review Exercise 01 - Clean Code Principles","updated_by_id":null,"merge_error":null,"merge_params":{"force_remove_source_branch":"0"},"merge_when_pipeline_succeeds":false,"merge_user_id":null,"merge_commit_sha":null,"approvals_before_merge":null,"rebase_commit_sha":null,"in_progress_merge_commit_sha":null,"lock_version":0,"time_estimate":0,"squash":false,"last_edited_at":null,"last_edited_by_id":null,"discussion_locked":null,"allow_maintainer_to_push":null,"squash_commit_sha":null,"diff_head_sha":"d24f5d7da943ac13ce81bf0b53d28136ceb571f4","source_branch_sha":"d24f5d7da943ac13ce81bf0b53d28136ceb571f4","target_branch_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","state":"opened","metrics":{"id":44354172,"latest_build_started_at":null,"latest_build_finished_at":null,"first_deployed_to_production_at":null,"merged_at":null,"created_at":"2020-04-12T16:37:39.541Z","updated_at":"2020-04-12T16:37:39.541Z","merged_by_id":null,"latest_closed_by_id":null,"latest_closed_at":null,"first_comment_at":null,"first_commit_at":null,"last_commit_at":null,"diff_size":null,"modified_paths_size":null,"commits_count":null,"first_approved_at":null,"first_reassigned_at":null,"added_lines":null,"removed_lines":null},"award_emoji":[],"notes":[],"merge_request_diff":{"id":84999625,"state":"collected","created_at":"2020-04-12T16:37:39.106Z","updated_at":"2020-04-12T16:37:39.155Z","base_commit_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","real_size":"6","head_commit_sha":"d24f5d7da943ac13ce81bf0b53d28136ceb571f4","start_commit_sha":"cf798fa14bb8ea9b683afac9d0fb4298410330af","commits_count":1,"merge_request_diff_commits":[{"authored_date":"2020-04-12T00:53:20.000Z","committed_date":"2020-04-12T00:53:20.000Z","relative_order":0,"sha":"d24f5d7da943ac13ce81bf0b53d28136ceb571f4","author_name":"Madrich","author_email":"madrich@cyber.org.il","committer_name":"Madrich","committer_email":"madrich@cyber.org.il","message":"Add exercise 01 files\n"}],"merge_request_diff_files":[{"relative_order":0,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"01 Principles/01 - KISS.cpp","old_path":"01 Principles/01 - KISS.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,44 @@\n+// Keep It Simple, Stupid\n+\n+#include \u003cstdexcept\u003e\n+\n+class Digit\n+{\n+    unsigned short d;\n+public:\n+    Digit(unsigned short value)\n+    {\n+        if (value \u003e 48 \u0026\u0026 !(value != 48)) {\n+            if (value \u003c 57 \u0026\u0026 !(value != 57)) {\n+                d = value;\n+            } else {\n+                throw std::range_error(\"illegal value\");\n+            }\n+        } else {\n+            throw std::range_error(\"illegal value\");\n+        }\n+\n+        throw std::range_error(\"illegal value\");\n+    }\n+\n+    unsigned short getValue() const \n+    {\n+        unsigned short calculatedValue = d;\n+        calculatedValue = calculatedValue + 2000;\n+\n+        for (int i = 1; i \u003c 23; i++) {\n+            calculatedValue = calculatedValue + calculatedValue;\n+        }\n+\n+        calculatedValue = calculatedValue / 23;\n+        calculatedValue = calculatedValue - (2 * 1000);\n+\n+        if (!(d != calculatedValue)) {\n+            return calculatedValue;\n+        } else {\n+            return d;\n+        }\n+\n+        return null;\n+    }\n+};\n"},{"relative_order":1,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"01 Principles/02 - DRY.cpp","old_path":"01 Principles/02 - DRY.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,23 @@\n+// Don't Repeat Yourself\n+\n+struct Point\n+{\n+    int x;\n+    int y;\n+};\n+\n+double calcTrianglePerimeter(const Point\u0026 A, const Point\u0026 B, const Point\u0026 C)\n+{\n+    return std::sqrt((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y)) +\n+           std::sqrt((C.x - B.x) * (C.x - B.x) + (C.y - B.y) * (C.y - B.y)) +\n+           std::sqrt((A.x - C.x) * (A.x - C.x) + (A.y - C.y) * (A.y - C.y));\n+}\n+\n+double calcPentagonPerimeter(const Point\u0026 A, const Point\u0026 B, const Point\u0026 C, const Point\u0026 D, const Point\u0026 E)\n+{\n+    return std::sqrt((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y)) +\n+           std::sqrt((C.x - B.x) * (C.x - B.x) + (C.y - B.y) * (C.y - B.y)) +\n+           std::sqrt((D.x - C.x) * (D.x - C.x) + (D.y - C.y) * (D.y - C.y)) +\n+           std::sqrt((E.x - D.x) * (E.x - D.x) + (E.y - D.y) * (E.y - D.y)) +\n+           std::sqrt((A.x - E.x) * (A.x - E.x) + (A.y - E.y) * (A.y - E.y));\n+}\n\\ No newline at end of file\n"},{"relative_order":2,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"01 Principles/03 - SRP.cpp","old_path":"01 Principles/03 - SRP.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,28 @@\n+// Single Responsibility Principle\n+\n+#include \u003cstring\u003e\n+#include \u003cstdexcept\u003e\n+\n+class Person\n+{\n+    std::string _firstName;\n+    std::string _lastName;\n+    std::string _email;\n+\n+    bool validateEmail(const std::string\u0026 email)\n+    {\n+        if (email.find('@') == std::string::npos)\n+            return false;\n+        return true;\n+    }\n+\n+public:\n+    Person(const std::string\u0026 firstName, const std::string\u0026 lastName, const std::string\u0026 email)\n+        : _firstName(firstName), _lastName(lastName)\n+    {\n+        if (!validateEmail(email))\n+            throw std::invalid_argument(\"Email address not valid\");\n+\n+        _email = email;\n+    }\n+};\n"},{"relative_order":3,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"01 Principles/04 - OCP.cpp","old_path":"01 Principles/04 - OCP.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,37 @@\n+// Open-Closed Principle\n+\n+#define PI  3.14159265359\n+\n+#define SHAPE_TYPE_CIRCLE       1\n+#define SHAPE_TYPE_RECTANGLE    2\n+\n+struct Circle\n+{\n+    int x;\n+    int y;\n+    int radius;\n+};\n+\n+struct Rectangle\n+{\n+    int x1;\n+    int y1;\n+    int x2;\n+    int y2;\n+};\n+\n+double calcArea(void *shape, int type)\n+{\n+    double tmp = 0;\n+\n+    if (type == SHAPE_TYPE_CIRCLE) {\n+        Circle *pCircle = (Circle*)shape;\n+        tmp = PI * std::pow(pCircle-\u003eradius, 2);\n+    } \n+    else if (type == SHAPE_TYPE_RECTANGLE) {\n+        Rectangle *pRectangle = (Rectangle*)shape;\n+        tmp = (pRectangle-\u003ex2 - pRectangle-\u003ex1) * (pRectangle-\u003ey2 - pRectangle-\u003ey1);\n+    }\n+\n+    return tmp; \n+}\n"},{"relative_order":4,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"01 Principles/05 - LSP.cpp","old_path":"01 Principles/05 - LSP.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,33 @@\n+// Liskov Substitution Principle\n+\n+#include \u003cstdexcept\u003e\n+\n+class Instrument\n+{\n+public:\n+    virtual void playChord() const = 0;\n+};\n+\n+class Guitar : public Instrument\n+{\n+public:\n+    void playChord() const\n+    {\n+        std::cout \u003c\u003c \"Am\" \u003c\u003c std::endl;\n+    }\n+};\n+\n+class Drum : public Instrument\n+{\n+public:\n+    void playChord() const\n+    {\n+        // We throw exception here because drum can't play chords\n+        throw std::runtime_error(\"Unsupported instrument\");\n+    }\n+};\n+\n+void Musician(const Instrument\u0026 instrument)\n+{\n+    instrument.playChord();\n+}\n"},{"relative_order":5,"new_file":true,"renamed_file":false,"deleted_file":false,"too_large":false,"a_mode":"0","b_mode":"100644","new_path":"01 Principles/06 - ISP.cpp","old_path":"01 Principles/06 - ISP.cpp","binary":false,"utf8_diff":"@@ -0,0 +1,30 @@\n+// Interface Segregation Principle\n+\n+#include \u003cstdexcept\u003e\n+\n+// Phone Interface (not Apple product)\n+struct IPhone\n+{\n+    virtual void call() const = 0;\n+    virtual void sms() const = 0;\n+    virtual void fax() const = 0;\n+};\n+\n+struct HomePhone : public IPhone\n+{\n+public:\n+    virtual void call() { std::cout \u003c\u003c \"E.T. Phone Home\" \u003c\u003c std::endl; }\n+\n+    virtual void sms() { throw std::runtime_error(\"Unsupported function\"); }\n+\n+    virtual void fax() { std::cout \u003c\u003c \"E.T. Fax Home\" \u003c\u003c std::endl; }\n+};\n+\n+struct SmartPhone : public IPhone\n+{\n+    virtual void call() { std::cout \u003c\u003c \"E.T. uses Android\" \u003c\u003c std::endl; }\n+\n+    virtual void sms() { std::cout \u003c\u003c \"E.T. SMS Home\" \u003c\u003c std::endl; }\n+\n+    virtual void fax() { throw std::runtime_error(\"Unsupported function\"); }\n+};\n\\ No newline at end of file\n"}]},"events":[{"id":717210842,"project_id":18077653,"author_id":2164410,"created_at":"2020-04-12T16:37:39.611Z","updated_at":"2020-04-12T16:37:39.611Z","target_type":"MergeRequest","group_id":null,"action":1}],"timelogs":[],"label_links":[],"resource_label_events":[]}],"external_pull_requests":[],"ci_pipelines":[],"auto_devops":null,"triggers":[],"pipeline_schedules":[],"container_expiration_policy":{"created_at":"2020-04-12T00:45:39.554Z","updated_at":"2020-04-12T00:45:39.554Z","next_run_at":"2020-04-19T00:45:39.550Z","project_id":18077653,"name_regex":null,"cadence":"7d","older_than":null,"keep_n":null,"enabled":true},"services":[],"protected_branches":[{"id":18833522,"project_id":18077653,"name":"master","created_at":"2020-04-12T00:48:28.988Z","updated_at":"2020-04-12T00:48:28.988Z","code_owner_approval_required":false,"merge_access_levels":[{"id":18841812,"access_level":40,"created_at":"2020-04-12T00:48:28.990Z","updated_at":"2020-04-12T00:48:28.990Z","user_id":null,"group_id":null}],"push_access_levels":[{"id":18889415,"access_level":40,"created_at":"2020-04-12T00:48:28.992Z","updated_at":"2020-04-12T00:48:28.992Z","user_id":null,"group_id":null}],"unprotect_access_levels":[]}],"protected_tags":[],"project_feature":{"id":18450157,"project_id":18077653,"merge_requests_access_level":20,"issues_access_level":0,"wiki_access_level":0,"snippets_access_level":0,"builds_access_level":0,"created_at":"2020-04-12T00:45:39.567Z","updated_at":"2020-04-12T19:02:30.054Z","repository_access_level":20,"pages_access_level":0,"forking_access_level":0},"custom_attributes":[],"prometheus_metrics":[],"project_badges":[],"ci_cd_settings":{"group_runners_enabled":true},"error_tracking_setting":null,"metrics_setting":null,"boards":[],"protected_environments":[],"service_desk_setting":null}